/*
找出两个相等高度建筑区间之间是否有高度比它小的
单调栈思路
从左到右遍历每个建筑的高度。
用一个栈维护当前“还没被覆盖”的海报高度。
如果当前高度小于栈顶，弹出栈顶（说明前面的海报结束）。
如果当前高度大于栈顶，或者栈为空，压入当前高度（新海报开始）。
如果当前高度等于栈顶，不需要新海报。
每次压入新高度，海报数加一。
*/

#include <iostream>
#include <stack>
using namespace std;
typedef long long ll;
ll n;
ll d[250005];
ll w[250005];
stack<ll> s;
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cin >> n;
	for (ll i = 0; i < n; i++)
	{
		cin >> d[i] >> w[i];
	}
	ll ans = 0;
	for (ll i = 0; i < n; i++)
	{
		while (!s.empty() && s.top() > w[i])
			s.pop();
		if (s.empty() || s.top() < w[i])
			s.push(w[i]), ans++;
	}
	//如果相等，不需要新海报
	cout << ans << endl;
}
//栈顶元素就是当前“活跃”的、还在覆盖的那一层海报的高度

/*
栈顶元素：表示当前最新、最近开始且还在延续的海报高度。它直接与当前遍历到的建筑高度进行比较和处理，决定是否需要新海报或结束旧海报。
非栈顶元素：表示之前开始但还没有被结束的海报高度。它们暂时还在“活跃”状态，但不会直接影响当前建筑的处理，只有当当前高度比这些高度还要低时，才会逐步弹出这些元素，结束对应的海报。
*/